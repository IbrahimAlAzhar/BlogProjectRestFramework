"""
Django settings for blog_project_rest project.

Generated by 'django-admin startproject' using Django 2.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '1i99=ymy235ukvi98$($##2i%s=bc8wp8-pi_lb*gnp33=+ri-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites', # when we working with django allauth which works with site_id,so we define in here

    # 3rd party apps
    'rest_framework',
    'rest_framework.authtoken', # 3rd party apps,we add authtoken app which generates the tokens on the server,it comes included with django rest framework,when user login the server send a token,after the logout the user the token will destroy
    'rest_framework_swagger', # use 3rd party app(use for schema and documentation) which is 'django-rest-swagger',we have to install it,this pacakge to implement the OpenAPI Specification with a tool called Swagger,this is a third party app,not something with built in support like coreapi,this is the current best practice approach for documenting a RESTful API
    'allauth', # use 3rd party app allauth,we use django-rest-auth in combination with django-allauth for registration and other purposes,django-rest-auth and django-allauth minimize the amount of code
    'allauth.account', # use 3rd party app allauth for account related purpose
    'allauth.socialaccount', # use 3rd party app allauth for social authentication like Facebook,Google,Twitter
    'rest_auth',  # this one is using for authentication which is like django allauth in traditional django (which is using for login,logout,password reset,password confirm,signup process)
    'rest_auth.registration', # we add rest_auth.registration from the django-rest-auth package then we have user registration endpoints too,so for registration purpose we use 'rest_auth' not django allauth
    # local
    'posts.apps.PostsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blog_project_rest.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog_project_rest.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

# for rest framework
# if is also a good idea to explicitly set our permissions which by default in Django REST framework are configured to AllowAny
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        # default_permission_classes was set to AllowAny before we updated it to IsAuthenticated
        #'rest_framework.permissions.AllowAny', # here we set allowany so any one user who even not logged in can read,write,update a post
        'rest_framework.permissions.IsAuthenticated', # it means only authenticated,registered users have access to read,write,update and delete
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication', # sessions are used to power the browsable API and the ability to log in and log out of it(create a session when user log in,aftter log out session will destroy)
        #'rest_framework.authentication.BasicAuthentication'  # basic authentication is used to pass the session ID in the HTTP headers for the API itself
        'rest_framework.authentication.TokenAuthentication',  # we use token authentication which provides token in place of Basic authentication which one provides a id
    ]
}
# there are four types of permission access
# AllowAny - any user,authenticated or not,has full access
# IsAuthenticated - only authenticated,registered user have access(read,write,update,delete)
# IsAdminUser - only admins/superusers have access
# IsAuthenticatedOrReadOnly - unauthorized users(not logged in) can view any page,but only logged in users have write,edit or delete privileges,

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # The email back-end config is needed since by default an email will be sent when a new user is registered asking them to confirm their account in command console rather than an email server

SITE_ID = 1 # site_id is part of the built in django "sites" framework which is a way to host multiple websites from the same django project,we obviously only have one site we are working on here but django-allauth uses the sites framework,so we must specify a default setting
REST_FRAMEWORK = {'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema' } # we should add this line when you see schema with documentation

# swagger use rest_framework login and logout,without this setting explicitly we can't login or logout using swagger
SWAGGER_SETTINGS = {
    'LOGIN_URL': 'rest_framework:login',
    'LOGOUT_URL': 'rest_framework:logout',
}